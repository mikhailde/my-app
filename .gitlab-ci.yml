stages:
  - build
  - test
  - deploy

variables:
  DEPLOY_METHOD: "terraform"

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_JOB_TOKEN}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:latest"
      --cache=true
      --cache-repo=${CI_REGISTRY_IMAGE}/cache

test:
  stage: test
  image: python:latest
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - venv/
    policy: pull-push
  script:
    - if [ "$CI_NODE_INDEX" == "1" ]; then python -m unittest tests.test_app; fi
    - if [ "$CI_NODE_INDEX" == "2" ]; then python -m unittest tests.test_utils; fi
  parallel: 2

deploy_helm:
  stage: deploy
  image: dtzar/helm-kubectl
  only:
    variables:
      - $DEPLOY_METHOD == "helm"
  script:
    - helm upgrade --install my-app ./chart
      --set image.tag=latest
      --set image.repository=$CI_REGISTRY_IMAGE
      --namespace my-app --create-namespace
    - kubectl rollout restart deployment my-app -n my-app

deploy_tf:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/1.5:v1.8.0
  variables:
    TF_VAR_image_registry: $CI_REGISTRY_IMAGE
    TF_CLI_CONFIG_FILE: "config.tfrc"
  only:
    variables:
      - $DEPLOY_METHOD == "terraform"
  before_script:
    - cd terraform
    - gitlab-terraform init
  script:
    - gitlab-terraform plan -lock=false
    - gitlab-terraform apply
